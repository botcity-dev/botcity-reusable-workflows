name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      commands:
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      EC2_INSTANCE_ID:
        required: true
      ENV_VARS:
        required: false

jobs:
  deploy:
    name: Generic Deploy via SSM
    runs-on: ubuntu-latest
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Set environment variables from .env
        run: |
          echo "${{ secrets.ENV_VARS }}" > .deploy.env

      - name: Create script with injected commands
        run: |
          echo '${{ inputs.commands }}' > ./deploy-ssm.sh
          chmod +x ./deploy-ssm.sh

      - name: Execute deploy script remotely via SSM
        shell: bash
        run: |
          set -e

          # Load .env if it exists
          if [[ -f .deploy.env ]]; then
            set -a
            source .deploy.env
            set +a
          fi

          # Validate required inputs
          if [[ -z "${{ secrets.EC2_INSTANCE_ID }}" || -z "${{ inputs.aws-region }}" ]]; then
            echo "Missing required arguments: EC2_INSTANCE_ID or aws-region"
            exit 1
          fi

          # Prepare and escape script content
          SCRIPT_CONTENT=$(jq -Rs '.' < ./deploy-ssm.sh)

          echo "Sending SSM command to instance..."

          COMMAND_ID=$(aws ssm send-command \
            --region "${{ inputs.aws-region }}" \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy from GitHub Actions" \
            --parameters "{\"commands\": [$SCRIPT_CONTENT]}" \
            --query "Command.CommandId" \
            --output text)

          for i in {1..30}; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id "$COMMAND_ID" \
              --region "${{ inputs.aws-region }}" \
              --query "CommandInvocations[0].Status" \
              --output text)

            echo "Current status: $STATUS"

            if [[ "$STATUS" == "Success" ]]; then
              echo "✅ SSM command completed successfully."
              exit 0
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
              echo "❌ SSM command failed with status: $STATUS"
              exit 1
            fi

            sleep 10
          done

          echo "SSM command did not finish in expected time."
          exit 1
